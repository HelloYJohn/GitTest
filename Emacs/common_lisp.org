* 第一章 简介
** 1.1 New Tools
a function return the sum of less number n
#+BEGIN_SRC emacs-lisp
(defun sum (n)
  (let ((s 0))
    (dotimes (i n s)
      (incf s i))))

(sum 999)
#+END_SRC

#+RESULTS:
: 498501

#+BEGIN_SRC C -n -r includes <stdio.h>
int sum(int n) {
    int i, s = 0;
    for (i = 0; i < n; i++) {
        s += i;
    }
    return s;
}
printf("%d\n", sum(100));
#+END_SRC

#+RESULTS:
: 4950

a function , input n, return sum n + argument
#+BEGIN_SRC emacs-lisp
(defun addn (n)
  #'(lamdba (x)
    (+ x n)))
(addn 100)
#+END_SRC

#+RESULTS:
| lamdba | (x) | (+ x n) |

** 1.2 New Techniques
** 1.3 New Approach

* 第二章 Welcome to Lisp
** 2.1 Form
   toplevel :lisp系统含有的一个交互式前端.
** 2.2 Evaluation
   求值规则: 由左至右对实参求值,将它们的数值传入函数,来返回整个表达式的值.
   不遵循求值规则的操作符: quote, 它什么也不做,接受一个实参,并完封不动地返回它.
#+begin_src lisp
(quote (+ 3 5))
#+end_src

#+RESULTS:
| + | 3 | 5 |
** 2.3 Data
   符号symbol与列表lists
   符号是英语的单词(word),无论你怎么输入,通常会被转换为大写
   符号通常不对自身求值,所以要想引用符号,应用'引用它

   列表是由被括号包住的零个或多个元素来表示.元素可以是任何类型,包含列表本身.
   列表必须要引用,不然lisp会以为是这个函数调用
#+BEGIN_SRC lisp
'Arichoke
#+END_SRC

#+RESULTS:
: ARICHOKE

#+BEGIN_SRC lisp
'(my 3 "Sons")
#+END_SRC

#+RESULTS:
| MY | 3 | Sons |

#+BEGIN_SRC lisp
(list '(+ 2 1) (+ 2 1))
#+END_SRC

#+RESULTS:
| (+ 2 1) | 3 | 
  

#+BEGIN_SRC lisp
()
#+END_SRC

#+RESULTS:
: NIL
** List Operations
    用函数cons来构造列表,如果传入的第二个实参是列表,则返回由两个实参所构成的新列表,新列表为第一个实参加上第二个实参:
#+BEGIN_SRC lisp
(cons 'a '(b c d))
#+END_SRC

#+RESULTS:
| A | B | C | D | 
    可以通过把新元素建立在空表上,来构建一个新列表.
#+BEGIN_SRC lisp
(cons 'a (cons 'b nil))
#+END_SRC

#+RESULTS:
| A | B | 
    取出列表元素的基本函数是car和cdr, car返回第一个元素,cdr返回第一个元素之后的所有元素
#+BEGIN_SRC lisp
(car '(a b c))
#+END_SRC

#+RESULTS:
: A
#+BEGIN_SRC lisp
(cdr '(a b c))
#+END_SRC

#+RESULTS:
| B | C | 
    取第n个元素
#+BEGIN_SRC lisp
(car (cdr (cdr '(a b c d)))) 
#+END_SRC

#+RESULTS:
: C
    更简单的方法
#+BEGIN_SRC lisp
(fourth '(a b c d))
#+END_SRC

#+RESULTS:
: D
** 2.5 Truth
   在lisp中,符号t表示逻辑真的缺省值, 与nil相同, t也是对自身求值.
#+BEGIN_SRC lisp
(listp '(a b c))
#+END_SRC

#+RESULTS:
: T
    函数的返回值将会解释为逻辑真和逻辑假时, 则称此函数为谓词(predicate), 在lisp中谓词的名字以p结尾
    nil在lisp中扮演两个角色 空表 假
#+BEGIN_SRC lisp
;;实参是空表,返回真 
(null nil)
#+END_SRC

#+RESULTS:
: T

#+BEGIN_SRC lisp
;; 实参是假,返回真
(not nil)
#+END_SRC

#+RESULTS:
: T
    最简单的条件式是if. 通常接受3个实参,一个test表达式,一个then表达式,一个else表达式, 若test表达式为真,则对then表达式求值,否则对else表达式求值; if的最后一个实参是可选择的,忽略,缺省值是nil
#+BEGIN_SRC lisp
(if (listp '(a b c))
  (+ 1 2)
  (+ 5 6))
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC lisp
(if (listp 27)
  (+ 1 2))
#+END_SRC

#+RESULTS:
: NIL

   虽然t是真的缺省表示法,任何非nil的东西,在逻辑的上下文通通视为真
#+BEGIN_SRC lisp
(if 27 1 2)
#+END_SRC

#+RESULTS:
: 1
   逻辑操作符and和or与条件类似,两者都接受任意数量的实参,但仅对能返回值的几个实参求值.
   若所有实参都为真,则and会返回最后一个实参的值,若其中一个为假,则之后的所有实参都不会被求值
   or也是如此,若碰到一个为真的实参,就停止对之后所有的实参求值.
   这两个操作符称为宏
#+BEGIN_SRC lisp
(and t (+ 1 2))
#+END_SRC

#+RESULTS:
: 3
** 2.6 Function
   可以用defun来定义新函数.通常接受三个以上的实参: 一个名字, 一组用列表表示的实参,以及一个或多个组成函数体的表达式.
#+BEGIN_SRC lisp
(defun our-third (x)
  (car (cdr (cdr x))))
(our-third '(a b c d))
#+END_SRC

#+RESULTS:
: C
   符号是变量的名字,符号本身就是以对象的形式存在.这是为什么符号,必须像列表一样被引用.
   列表必须被引用,不然被视为代码; 符号必须被引用,不然被视为变量.

** 2.7 Recursion
#+BEGIN_SRC lisp
(defun our-member (obj lst)
  (if (null lst)
    nil
  (if (eql (car lst) obj)
    lst
    (our-member obj (cdr lst)) )))
(our-member 'b '(a b c))
(our-member 'b '(a b c a b c))
#+END_SRC

#+RESULTS:
| B | C | A | B | C |

** 2.8 Reading Lisp
** 2.9 Input and Output
#+BEGIN_SRC lisp
(format t "~A plus ~A equals ~A. ~%" 2 3 (+ 2 3))
#+END_SRC

#+RESULTS:
: NIL

#+BEGIN_SRC lisp
(defun askem (string)
  (format t "~A" string)
  (read))
(askem "How old are you?")
#+END_SRC

** 2.10 Variable
   局部变量
#+BEGIN_SRC lisp
(let ((x 1) (y 2))
  (+ x y))
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC lisp
(defun ask-number()
  (format t "Please enter a number.")
  (let ((val (read)))
    (if (numberp val)
      val
      (ask-number))))
(ask-number)
#+END_SRC

#+RESULTS:
: ASK-NUMBER
   全局变量 使用*开始 全局变量 *结束 
#+BEGIN_SRC lisp
(defparameter *glob* 99)
#+END_SRC

#+RESULTS:
: *GLOB*

#+BEGIN_SRC lisp
(defconstant limit (+ *glob* 1))
#+END_SRC

#+RESULTS:
: LIMIT

** 2.11 Assignment
  最普遍的赋值操作符是setf,可以给全局或局部变量赋值 
#+BEGIN_SRC lisp
(setf *glob* 98)
#+END_SRC

#+RESULTS:
: 98
#+BEGIN_SRC lisp
(let ((n 10))
  (setf n 2))
#+END_SRC

#+RESULTS:
: 2

   如果setf的第一个参数是符号(symbol), 且符号不是某个局部变量,则setf把这个符号设为全局变量, 通过赋值,隐式地创建全局变量 
#+BEGIN_SRC lisp
(setf x (list 'a 'b 'c))
#+END_SRC

#+RESULTS:
| A | B | C |

    setf的第一个参数几乎可以是任何引用到特定位置的表达式

** 2.12 Function Programming
   函数式编程意味着撰写利用返回值而工作的程序,而不是修改东西.
#+BEGIN_SRC lisp
(setf lst '(c a r a t))
(remove 'a lst)
lst
#+END_SRC

#+RESULTS:
| C | A | R | A | T |
函数式编程本质上意味着避免使用setf函数
** 2.13 Iteration
#+BEGIN_SRC lisp
(defun show-squares (start end)
  (do ((i start (+ i 1)))
    ((> i end) 'done)
    (format t "~A ~A~%" i (* i *))))
(show-squares 2 5)
#+END_SRC

#+RESULTS:
: DONE

** 2.14 Function as Objects
   

