* 第一章 简介
** 1.1 New Tools
a function return the sum of less number n
#+BEGIN_SRC emacs-lisp
(defun sum (n)
  (let ((s 0))
    (dotimes (i n s)
      (incf s i))))

(sum 999)
#+END_SRC

#+RESULTS:
: 498501

#+BEGIN_SRC C -n -r includes <stdio.h>
int sum(int n) {
    int i, s = 0;
    for (i = 0; i < n; i++) {
        s += i;
    }
    return s;
}
printf("%d\n", sum(100));
#+END_SRC

#+RESULTS:
: 4950

a function , input n, return sum n + argument
#+BEGIN_SRC emacs-lisp
(defun addn (n)
  #'(lamdba (x)
    (+ x n)))
(addn 100)
#+END_SRC

#+RESULTS:
| lamdba | (x) | (+ x n) |

** 1.2 New Techniques
** 1.3 New Approach

* 第二章 Welcome to Lisp
** 2.1 Form
   toplevel :lisp系统含有的一个交互式前端.
** 2.2 Evaluation
   求值规则: 由左至右对实参求值,将它们的数值传入函数,来返回整个表达式的值.
   不遵循求值规则的操作符: quote, 它什么也不做,接受一个实参,并完封不动地返回它.
#+begin_src lisp
(quote (+ 3 5))
#+end_src

#+RESULTS:
| + | 3 | 5 |
** 2.3 Data
   符号symbol与列表lists
   符号是英语的单词(word),无论你怎么输入,通常会被转换为大写
   符号通常不对自身求值,所以要想引用符号,应用'引用它

   列表是由被括号包住的零个或多个元素来表示.元素可以是任何类型,包含列表本身.
   列表必须要引用,不然lisp会以为是这个函数调用
#+BEGIN_SRC lisp
'Arichoke
#+END_SRC

#+RESULTS:
: ARICHOKE

#+BEGIN_SRC lisp
'(my 3 "Sons")
#+END_SRC

#+RESULTS:
| MY | 3 | Sons |

#+BEGIN_SRC lisp
(list '(+ 2 1) (+ 2 1))
#+END_SRC

#+RESULTS:
| (+ 2 1) | 3 | 
  

#+BEGIN_SRC lisp
()
#+END_SRC

#+RESULTS:
: NIL
** List Operations
    用函数cons来构造列表,如果传入的第二个实参是列表,则返回由两个实参所构成的新列表,新列表为第一个实参加上第二个实参:
#+BEGIN_SRC lisp
(cons 'a '(b c d))
#+END_SRC

#+RESULTS:
| A | B | C | D | 
    可以通过把新元素建立在空表上,来构建一个新列表.
#+BEGIN_SRC lisp
(cons 'a (cons 'b nil))
#+END_SRC

#+RESULTS:
| A | B | 
    取出列表元素的基本函数是car和cdr, car返回第一个元素,cdr返回第一个元素之后的所有元素
#+BEGIN_SRC lisp
(car '(a b c))
#+END_SRC

#+RESULTS:
: A
#+BEGIN_SRC lisp
(cdr '(a b c))
#+END_SRC

#+RESULTS:
| B | C | 
    取第n个元素
#+BEGIN_SRC lisp
(car (cdr (cdr '(a b c d)))) 
#+END_SRC

#+RESULTS:
: C
    更简单的方法
#+BEGIN_SRC lisp
(fourth '(a b c d))
#+END_SRC

#+RESULTS:
: D
** 2.5 Truth
   在lisp中,符号t表示逻辑真的缺省值, 与nil相同, t也是对自身求值.
#+BEGIN_SRC lisp
(listp '(a b c))
#+END_SRC

#+RESULTS:
: T
    函数的返回值将会解释为逻辑真和逻辑假时, 则称此函数为谓词(predicate), 在lisp中谓词的名字以p结尾
    nil在lisp中扮演两个角色 空表 假
#+BEGIN_SRC lisp
;;实参是空表,返回真 
(null nil)
#+END_SRC

#+RESULTS:
: T

#+BEGIN_SRC lisp
;; 实参是假,返回真
(not nil)
#+END_SRC

#+RESULTS:
: T
    最简单的条件式是if. 通常接受3个实参,一个test表达式,一个then表达式,一个else表达式, 若test表达式为真,则对then表达式求值,否则对else表达式求值; if的最后一个实参是可选择的,忽略,缺省值是nil
#+BEGIN_SRC lisp
(if (listp '(a b c))
  (+ 1 2)
  (+ 5 6))
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC lisp
(if (listp 27)
  (+ 1 2))
#+END_SRC

#+RESULTS:
: NIL

   虽然t是真的缺省表示法,任何非nil的东西,在逻辑的上下文通通视为真
#+BEGIN_SRC lisp
(if 27 1 2)
#+END_SRC

#+RESULTS:
: 1
   逻辑操作符and和or与条件类似,两者都接受任意数量的实参,但仅对能返回值的几个实参求值.
   若所有实参都为真,则and会返回最后一个实参的值,若其中一个为假,则之后的所有实参都不会被求值
   or也是如此,若碰到一个为真的实参,就停止对之后所有的实参求值.
   这两个操作符称为宏
#+BEGIN_SRC lisp
(and t (+ 1 2))
#+END_SRC

#+RESULTS:
: 3
** 2.6 Function
   可以用defun来定义新函数.通常接受三个以上的实参: 一个名字, 一组用列表表示的实参,以及一个或多个组成函数体的表达式.
#+BEGIN_SRC lisp
(defun our-third (x)
  (car (cdr (cdr x))))
(our-third '(a b c d))
#+END_SRC

#+RESULTS:
: C
   符号是变量的名字,符号本身就是以对象的形式存在.这是为什么符号,必须像列表一样被引用.
   列表必须被引用,不然被视为代码; 符号必须被引用,不然被视为变量.

** 2.7 Recursion
#+BEGIN_SRC lisp
(defun our-member (obj lst)
  (if (null lst)
    nil
  (if (eql (car lst) obj)
    lst
    (our-member obj (cdr lst)) )))
(our-member 'b '(a b c))
(our-member 'b '(a b c a b c))
#+END_SRC

#+RESULTS:
| B | C | A | B | C |

** 2.8 Reading Lisp
** 2.9 Input and Output
#+BEGIN_SRC lisp
(format t "~A plus ~A equals ~A. ~%" 2 3 (+ 2 3))
#+END_SRC

#+RESULTS:
: NIL

#+BEGIN_SRC lisp
(defun askem (string)
  (format t "~A" string)
  (read))
(askem "How old are you?")
#+END_SRC

** 2.10 Variable
   局部变量
#+BEGIN_SRC lisp
(let ((x 1) (y 2))
  (+ x y))
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC lisp
(defun ask-number()
  (format t "Please enter a number.")
  (let ((val (read)))
    (if (numberp val)
      val
      (ask-number))))
(ask-number)
#+END_SRC

#+RESULTS:
: ASK-NUMBER
   全局变量 使用*开始 全局变量 *结束 
#+BEGIN_SRC lisp
(defparameter *glob* 99)
#+END_SRC

#+RESULTS:
: *GLOB*

#+BEGIN_SRC lisp
(defconstant limit (+ *glob* 1))
#+END_SRC

#+RESULTS:
: LIMIT

** 2.11 Assignment
  最普遍的赋值操作符是setf,可以给全局或局部变量赋值 
#+BEGIN_SRC lisp
(setf *glob* 98)
#+END_SRC

#+RESULTS:
: 98
#+BEGIN_SRC lisp
(let ((n 10))
  (setf n 2))
#+END_SRC

#+RESULTS:
: 2

   如果setf的第一个参数是符号(symbol), 且符号不是某个局部变量,则setf把这个符号设为全局变量, 通过赋值,隐式地创建全局变量 
#+BEGIN_SRC lisp
(setf x (list 'a 'b 'c))
#+END_SRC

#+RESULTS:
| A | B | C |

    setf的第一个参数几乎可以是任何引用到特定位置的表达式

** 2.12 Function Programming
   函数式编程意味着撰写利用返回值而工作的程序,而不是修改东西.
#+BEGIN_SRC lisp
(setf lst '(c a r a t))
(remove 'a lst)
lst
#+END_SRC

#+RESULTS:
| C | A | R | A | T |
函数式编程本质上意味着避免使用setf函数
** 2.13 Iteration
#+BEGIN_SRC lisp
(defun show-squares (start end)
  (do ((i start (+ i 1)))
    ((> i end) 'done)
    (format t "~A ~A~%" i (* i *))))
(show-squares 2 5)
#+END_SRC

+RESULTS:
: DONE

** 2.14 Function as Objects
#+BEGIN_SRC lisp
(function +)
#+END_SRC

#+RESULTS:
: #<FUNCTION +>
   等同于
#+BEGIN_SRC lisp
#'+
#+END_SRC

#+RESULTS:
: #<FUNCTION +>
  这个缩写称为升引号(sharp-quote)
  和别种对象类似,可以把函数当作实参传入.
  apply接受一个函数和实参列表,并返回把传入函数应用在实参列表的结果
#+BEGIN_SRC lisp
(apply #'+ '(1 2 3))
#+END_SRC

#+RESULTS:
: 6
  apply和function的都可以接受任意数量的实参,唯一区别是apply的最后一个参数必须是列表
  lambda表达式里的lambda不是一个操作符,而只是个符号.
#+BEGIN_SRC lisp
((lambda (x) (+ x 100)) 1)
#+END_SRC

#+RESULTS:
: 101
#+BEGIN_SRC lisp
(funcall #'(lambda (x) (+ x 100)) 1)
#+END_SRC

#+RESULTS:
: 101

** 2.15 Types
   数值才有类型,而变量没有
   每个对象都贴有一个标明其类型的标签.这种方法叫做显示类型(manifest typing)
   你不需要声明变量的类型,因为变量可以存放任意类型的对象.
   common lisp的内置类型,组成一个类别的层级,对象总是不止属于一个类型
#+begin_example
27的类型,依普遍性的增加排序依序是 fixnum integer rational real number atom t 
t类型所有类型的基类(supertype),所以所有对象都属于t类型
#+end_example
   typep接受一个对象和一个类型,判断对象是否是该类型,是返回真
#+BEGIN_SRC lisp
(typep 27 'integer)
#+END_SRC

#+RESULTS:
: T
** 2.16 Looking Forward
   lisp是来写lisp的语言

** Summary
   1. Lisp 是一种交互式语言。如果你在顶层输入一个表达式， Lisp 会显示它的值。
   2. Lisp 程序由表达式组成。表达式可以是原子，或一个由操作符跟着零个或多个实参的列表。前序表示法代表操作符可以有任意数量的实参。
   3. Common Lisp 函数调用的求值规则： 依序对实参从左至右求值，接着把它们的值传入由操作符表示的函数。 quote 操作符有自己的求值规则，它完封不动地返回实参。
   4. 除了一般的数据类型， Lisp 还有符号跟列表。由于 Lisp 程序是用列表来表示的，很轻松就能写出能编程的程序。
   5. 三个基本的列表函数是 cons ，它创建一个列表； car ，它返回列表的第一个元素；以及 cdr ，它返回第一个元素之后的所有东西。
   6. 在 Common Lisp 里， t 表示逻辑 真 ，而 nil 表示逻辑 假 。在逻辑的上下文里，任何非 nil 的东西都视为 真 。基本的条件式是 if 。 and 与 or 是相似的条件式。
   7. Lisp 主要由函数所组成。可以用 defun 来定义新的函数。
   8. 自己调用自己的函数是递归的。一个递归函数应该要被想成是过程，而不是机器。
   9. 括号不是问题，因为程序员通过缩排来阅读与编写 Lisp 程序。
   10. 基本的 I/O 函数是 read ，它包含了一个完整的 Lisp 语法分析器，以及 format ，它通过字符串模板来产生输出。
   11. 你可以用 let 来创造新的局部变量，用 defparameter 来创造全局变量。
   12. 赋值操作符是 setf 。它的第一个实参可以是一个表达式。
   13. 函数式编程代表避免产生副作用，也是 Lisp 的主导思维。
   14. 基本的迭代操作符是 do 。
   15. 函数是 Lisp 的对象。可以被当成实参传入，并且可以用 lambda 表达式来表示。
   16. 在 Lisp 里，是数值才有类型，而不是变量。

** Exercises
#+BEGIN_SRC lisp
(defun printNPoint (n)
  (case n
    ((= 0 n) (format t ""))
    ((= 1 n) (format  t "."))
    (t (progn (foramt t ".") 
        (printNPoint (- n 1))))))
(printNPoint 1)
#+END_SRC
#+RESULTS:
: NIL

#+BEGIN_SRC lisp
(defun countA (n l)
  (if (null l)
    n
    (if (eql (car l) 'a)
      (countA (+ n 1) (cdr l))
      (countA n (cdr l))
    )
  )  
)
(countA 0 '(a b c a c a a))

#+END_SRC

#+RESULTS:
: 4

* 第三章 List
** 3.1 Conses
#+BEGIN_SRC lisp
(setf x (cons 'a nil))
#+END_SRC

#+RESULTS:
| A | 
  一个列表中可以有任何类型的对象作为元素,可以包含另一个列表.
  嵌套列表 
  所有不是cons对象的东西,都是一个原子(atom),利用consp判断是否是cons对象
#+BEGIN_SRC lisp
(consp nil)
(listp nil)
#+END_SRC

#+RESULTS:
: T

** 3.2 Equality
  当你调用cons时, Lisp会配置一块新的内存给两个指针,所以用同样的参数调用cons两次,我们得到两个数值看起来一样,实际是不同的对象.
#+BEGIN_SRC lisp 
(eql (cons 'a nil) (cons 'a nil))
#+END_SRC

#+RESULTS:
: NIL
#+BEGIN_SRC lisp
(equal (cons 'a nil) (cons 'a nil))
#+END_SRC

#+RESULTS:
: T
  equal与eql的区别是参数相同,则返回真.
#+BEGIN_SRC lisp
(defun our-equal (x y)
  (or (eql x y)
      (and (consp x)
           (consp y)
           (our-equal (car x) (car y))
           (our-equal (cdr x) (cdr y)))))
(our-equal '(1 2 3) (cons 1 (cons 2  3)))
  our-equal 只适用于符号列表. 
#+END_SRC 

#+RESULTS:
: NIL
** 3.3Why Lisp Has No Pointers
  cons对象有指针指向它们的元素,变量有指针指向他们的值.
  当你赋一个值给变量或将这个值存在数据结构中,其实被存储的是指向这个值得指针.当你想要取得变量的值,或是存在数据结构中的内容时,lisp返回指向这个值得指针.

** 3.4 Building Lists
  函数copy-list接受一个列表,然后返回列表的复本.新的列表会有同样的元素,但是装在新的Cons对象里.
#+BEGIN_SRC lisp
(setf x '(a b c)
  y (copy-list x))
#+END_SRC

#+RESULTS:
| A | B | C |

#+BEGIN_SRC lisp
(defun our-copy-list (lst)
  (if (atom lst)
    lst
    (cons (car lst) (our-copy-list (cdr lst)))))
(our-copy-list (cons (cons 1 2) (cons 3 4)))
#+END_SRC

#+RESULTS:
: ((1 . 2) 3 . 4)

  函数append返回任何数目的列表串接(concatenation) 
#+BEGIN_SRC lisp
(append '(a b) '(c d) 'e)
#+END_SRC

#+RESULTS:
: (A B C D . E)
  通过这么做,它复制了所有的参数,除了最后一个

** 3.5 Example Compress and Uncompressed
[[file:compressAndZUncompressed.el][lisp code]]
** 3.6 Assess
#+BEGIN_SRC lisp
(nth 0 '(a b c))
#+END_SRC

#+RESULTS:
: A
#+BEGIN_SRC lisp
(nthcdr 0 '(a b . c))
#+END_SRC

#+RESULTS:
: (A B . C)

   nth与nthcdr都是零索引(zero-indexed)
#+BEGIN_SRC lisp
(defun our-nthcdr (n lst)
  (if (= n 0)
    lst
    (our-nthcdr (- n 1) (cdr lst))
    )
  )
(our-nthcdr 0 '(1 2 3 4 5 6))
#+END_SRC

#+RESULTS:
: NIL
   last函数返回列表的最后一个Cons对象
#+BEGIN_SRC lisp
(last '(a (b c c) (d d e f g)))
#+END_SRC

#+RESULTS:
| D | D | E | F | G |
#+BEGIN_SRC lisp
(last '(a b (c d e) (e g)))
#+END_SRC

#+RESULTS:
| E | G | 

#+BEGIN_SRC lisp
(defun our-last (lst)
  (if (not (consp (cdr lst)))
    lst
    (our-last (cdr lst))
    )
  )
(our-last '())
(our-last '(1))
(our-last '(1 2))
(last '(1 3 4 3 333 34 nil))
(our-last '(1 3 4 3 333 34 nil))
(equal (cons 1 nil) '(1))
#+END_SRC  

#+RESULTS:
: T
    common lisp定义了函数first直到tenth可以取得列表对应的元素.这些函数不是零索引(zero-indexed)
#+BEGIN_SRC lisp
(second '(1 2 3)) 
(nth 1 '(1 2 3))
#+END_SRC
    
#+RESULTS:
: 2
    caddr 表示(car (cdr (cdr )))
    可能会有异常(exception)产生.

** 3.7 Mapping Function
   common lisp 提供了数个函数来对一个列表的元素做函数调用.最常用的是mapcar,
   接受一个函数以及一个或多个列表,并返回把函数应用至每个列表的元素的结果, 直到有的列表没有元素为止.
#+BEGIN_SRC lisp
(mapcar #'(lambda (x) (+ x 10)) '(1 2 3))
#+END_SRC

#+RESULTS:
| 11 | 12 | 13 |
#+BEGIN_SRC lisp
(mapcar #'list '(a b c) '(1 2 3 4))
#+END_SRC

#+RESULTS:
| A | 1 |
| B | 2 |
| C | 3 |

    maplist接受同样的参数,将列表的渐进的下一个cdr传入函数
#+BEGIN_SRC lisp
(maplist #'(lambda (x) x)
  '(a b c) 
  )
#+END_SRC

#+RESULTS:
| A | B | C |
| B | C |   |
| C |   |   |

** 3.8 Tree
#+BEGIN_SRC lisp
(defun our-copy-tree (tr)
  (if (atom tr)
    tr
    (cons (our-copy-tree (car tr)) (our-copy-tree (cdr tr)))
    )
  )
(our-copy-tree '(1 (1 3) 2))
#+END_SRC

#+RESULTS:
| 1 | (1 3) | 2 |
#+BEGIN_SRC lisp
'(and (integerp x) (zerop (mod x 2)))
#+END_SRC

#+RESULTS:
| AND | (INTEGERP X) | (ZEROP (MOD X 2)) |

#+BEGIN_SRC lisp
(substitute 'y 'x '(and (integerp x) (zerop (mod x 2))))
(subst 'y 'x '(and (integerp x) (zerop (mod x 2))))
(defun our-subst (new old tr)
  (if (atom tr)
    (if (equal old tr)
      new
      tr
      )
    (cons (our-subst new old (car tr)) (our-subst new old (cdr tr)))
    )
  )
(our-subst 'y 'x '(and (integerp x) (zerop (mod x 2))))
#+END_SRC

#+RESULTS:
| AND | (INTEGERP Y) | (ZEROP (MOD Y 2)) |

** 3.8 Understanding Recursion
   一个递归函数是否正确,看两点
   1. 对于基本情况是否有效
   2. 当对第n种情况有效,它对n+1种情况是否有效
** 3.9 Sets
#+BEGIN_SRC lisp
(member '(a) '((a) (z)))
(member '(a) '((a) (z)) :test #'equal)
(member 'a '((a b) (c d)) :key #'car)
(member 2 '((1) (2) (2)) :key #'car :test #'equal)
#+END_SRC

#+RESULTS:
| 2 |
| 2 |

